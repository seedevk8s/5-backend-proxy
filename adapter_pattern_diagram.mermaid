classDiagram
    class SpringContainer {
        <<Spring IoC Container>>
        +getBean(name) Object
        +registerBean(name, bean) void
    }

    class ComponentScanProcess {
        <<Component Scanning>>
        +scanComponents() void
        +registerComponents() void
    }

    class ManualBeanRegistration {
        <<Manual Registration>>
        +registerProxyBeans() void
    }

    %% 충돌 발생 지점
    class ConflictZone {
        <<Conflict Area>>
        ❌ Same Bean Type
        ❌ OrderControllerV1
        ❌ OrderServiceV1
        ❌ OrderRepositoryV1
    }

    %% 어댑터 패턴 컴포넌트
    class BeanRegistrationAdapter {
        <<Adapter>>
        -String originalBeanName
        -String proxyBeanName
        +adaptBeanRegistration() void
        +resolveConflict() void
    }

    class ComponentScanTarget {
        <<Target>>
        @Component OrderControllerV1Impl
        @Service OrderServiceV1Impl  
        @Repository OrderRepositoryV1Impl
    }

    class InterfaceProxyTarget {
        <<Target>>
        OrderControllerInterfaceProxy
        OrderServiceInterfaceProxy
        OrderRepositoryInterfaceProxy
    }

    %% 해결 전략
    class ConflictResolutionStrategy {
        <<Strategy>>
        +EXCLUDE_COMPONENT_SCAN() void
        +MANUAL_PROXY_REGISTRATION() void
        +INTERFACE_PROXY_PATTERN() void
        +CONFIGURATION_BASED_APPROACH() void
    }

    %% 실제 적용된 해결책
    class AdapterImplementation {
        <<Concrete Adapter>>
        InterfaceProxyConfig
        - 컴포넌트 스캔 제외
        - 수동 프록시 빈 등록
        - 인터페이스 프록시 클래스 사용
        +resolveByExclusion() void
        +createInterfaceProxy() void
    }

    %% 실제 구현된 프록시 클래스들
    class OrderControllerInterfaceProxy {
        -OrderControllerV1 target
        -LogTrace logTrace
        +request(itemId) String
    }

    class OrderServiceInterfaceProxy {
        -OrderServiceV1 target
        -LogTrace logTrace
        +orderItem(itemId) void
    }

    class OrderRepositoryInterfaceProxy {
        -OrderRepositoryV1 target
        -LogTrace logTrace
        +save(itemId) void
    }

    %% 관계 설정
    SpringContainer --> ComponentScanProcess : uses
    SpringContainer --> ManualBeanRegistration : uses
    
    ComponentScanProcess --> ComponentScanTarget : would register
    ManualBeanRegistration --> InterfaceProxyTarget : registers
    
    ComponentScanTarget --> ConflictZone : conflicts with
    InterfaceProxyTarget --> ConflictZone : conflicts with
    
    BeanRegistrationAdapter --> ConflictZone : resolves
    BeanRegistrationAdapter --> ConflictResolutionStrategy : applies
    BeanRegistrationAdapter --> AdapterImplementation : implements
    
    AdapterImplementation --> ComponentScanTarget : excludes from scan
    AdapterImplementation --> InterfaceProxyTarget : creates manually
    
    InterfaceProxyTarget --> OrderControllerInterfaceProxy : contains
    InterfaceProxyTarget --> OrderServiceInterfaceProxy : contains
    InterfaceProxyTarget --> OrderRepositoryInterfaceProxy : contains
    
    note for ConflictZone "OrderControllerV1, OrderServiceV1,<br/>OrderRepositoryV1 타입의 빈이<br/>중복 등록되어 충돌 발생"
    note for BeanRegistrationAdapter "어댑터 패턴을 통해<br/>컴포넌트 스캔과 수동 빈 등록 간<br/>충돌 해결"
    note for AdapterImplementation "InterfaceProxyConfig에서<br/>컴포넌트 스캔 대신<br/>Interface Proxy 클래스를 직접 생성하여<br/>빈 등록 충돌 해결"