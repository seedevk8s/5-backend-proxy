classDiagram
    %% API 어댑터 클래스
    class OrderControllerV1ApiAdapter {
        <<@RestController>>
        -OrderControllerV1 orderController
        +request(itemId) String
        +noLog(itemId) String
    }

    class InterfaceProxyConfig {
        +orderController(logTrace) OrderControllerV1
        +orderService(logTrace) OrderServiceV1
        +orderRepository(logTrace) OrderRepositoryV1
    }

    class ThreadLocalLogTrace {
        -ThreadLocal~TraceId~ traceIdHolder
        +begin(message) TraceStatus
        +end(status) void
        +end(status, e) void
        -syncTraceId() void
        -releaseTraceId() void
    }

    class TraceStatus {
        -TraceId traceId
        -long startTimeMs
        -String message
    }

    class TraceId {
        -String id
        -int level
        +createNextId() TraceId
        +createPreviousId() TraceId
        +isFirstLevel() boolean
    }

    %% 인터페이스 정의
    class OrderControllerV1 {
        <<interface>>
        +request(itemId) String
    }

    class OrderServiceV1 {
        <<interface>>
        +orderItem(itemId) void
    }

    class OrderRepositoryV1 {
        <<interface>>
        +save(itemId) void
    }

    %% 실제 구현체
    class OrderControllerV1Impl {
        -OrderServiceV1 orderService
        +request(itemId) String
    }

    class OrderServiceV1Impl {
        -OrderRepositoryV1 orderRepository
        +orderItem(itemId) void
    }

    class OrderRepositoryV1Impl {
        +save(itemId) void
    }

    %% 프록시 구현체 (실제 존재하는 클래스들)
    class OrderControllerInterfaceProxy {
        -OrderControllerV1 target
        -LogTrace logTrace
        +OrderControllerInterfaceProxy(target, logTrace)
        +request(itemId) String
    }

    class OrderServiceInterfaceProxy {
        -OrderServiceV1 target
        -LogTrace logTrace
        +OrderServiceInterfaceProxy(target, logTrace)
        +orderItem(itemId) void
    }

    class OrderRepositoryInterfaceProxy {
        -OrderRepositoryV1 target
        -LogTrace logTrace
        +OrderRepositoryInterfaceProxy(target, logTrace)
        +save(itemId) void
    }

    %% 어댑터 패턴 적용
    class ComponentScanAdapter {
        <<stereotype>>
        +adaptToProxy() void
    }

    %% 인터페이스 구현 관계
    OrderControllerV1Impl ..|> OrderControllerV1 : implements
    OrderServiceV1Impl ..|> OrderServiceV1 : implements
    OrderRepositoryV1Impl ..|> OrderRepositoryV1 : implements

    OrderControllerInterfaceProxy ..|> OrderControllerV1 : implements
    OrderServiceInterfaceProxy ..|> OrderServiceV1 : implements
    OrderRepositoryInterfaceProxy ..|> OrderRepositoryV1 : implements

    %% 관계 설정
    OrderControllerV1ApiAdapter --> OrderControllerV1 : uses (proxy)
    
    InterfaceProxyConfig --> OrderControllerInterfaceProxy : creates
    InterfaceProxyConfig --> OrderServiceInterfaceProxy : creates
    InterfaceProxyConfig --> OrderRepositoryInterfaceProxy : creates
    InterfaceProxyConfig --> ThreadLocalLogTrace : uses
    
    OrderControllerInterfaceProxy --> OrderControllerV1Impl : delegates to
    OrderControllerInterfaceProxy --> ThreadLocalLogTrace : uses
    
    OrderServiceInterfaceProxy --> OrderServiceV1Impl : delegates to
    OrderServiceInterfaceProxy --> ThreadLocalLogTrace : uses
    
    OrderRepositoryInterfaceProxy --> OrderRepositoryV1Impl : delegates to
    OrderRepositoryInterfaceProxy --> ThreadLocalLogTrace : uses
    
    ThreadLocalLogTrace --> TraceStatus : creates
    ThreadLocalLogTrace --> TraceId : manages
    TraceStatus --> TraceId : contains

    %% 어댑터 패턴
    ComponentScanAdapter --> OrderControllerV1Impl : adapts
    ComponentScanAdapter --> OrderServiceV1Impl : adapts
    ComponentScanAdapter --> OrderRepositoryV1Impl : adapts

    %% 의존성 주입
    OrderControllerV1Impl --> OrderServiceV1 : depends on
    OrderServiceV1Impl --> OrderRepositoryV1 : depends on

    note for InterfaceProxyConfig "빈 등록 충돌 해결을 위해\n어댑터 패턴 적용\n인터페이스 프록시 클래스 생성"
    note for OrderControllerInterfaceProxy "OrderControllerV1 인터페이스를\n구현한 프록시 클래스\n로그 추적 기능 제공"
    note for ThreadLocalLogTrace "멀티스레딩 환경에서\n스레드별 로그 추적 관리"